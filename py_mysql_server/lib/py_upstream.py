#!/usr/bin/env python# coding=utf-8import socketimport osfrom pymysql import OperationalError, InternalError, MySQLErrorfrom pymysql._auth import scramble_native_passwordfrom mysql_proto.auth.challenge import Challengefrom mysql_proto.auth.response import Responsefrom mysql_proto.err import ERRfrom mysql_proto.packet import getSize, getSequenceId, getType, read_server_packet, send_client_socket, dump_my_packetfrom py_mysql_server.com.initdb import Initdbfrom py_mysql_server.lib import Flagsfrom py_mysql_server.lib.log import init_loggerfrom py_mysql_server.lib.packet import dumpclass PyUpstream:    def __init__(self, connection_settings=None, logger=None):        self.serverSocket = None        self.logger = logger if logger else init_logger()        if not connection_settings:            connection_settings = {                'host': "192.168.1.100",                'port': 3306,                'user': "admin",                'password': "aaaaaa",                'charset': "utf8mb4",                'db': "production"            }        self.conn_setting = connection_settings        self.connect()    def __del__(self):        self.disconnect()    def sendall(self, buff):        self.serverSocket.sendall(buff)        if __debug__:            self.logger.debug("send_server_socket:")            dump(buff)    def connect(self):        if not self.serverSocket:            HOST = self.conn_setting['host']            PORT = self.conn_setting['port']            password = self.conn_setting['password']            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            s.connect((HOST, PORT))            packet = read_server_packet(s)            challenge = Challenge.loadFromPacket(packet)            challenge1 = challenge.challenge1            challenge2 = challenge.challenge2            scramble_password = scramble_native_password(password, challenge1 + challenge2)            response = Response()            response.sequenceId = 1            response.capabilityFlags = 33531397            response.characterSet = 33            response.maxPacketSize = 16777216            response.clientAttributes["_client_name"] = 'pymysql'            response.clientAttributes["_pid"] = str(os.getpid())            response.clientAttributes["_client_version"] = '5.6'            response.clientAttributes["program_name"] = 'mysql'            response.pluginName = 'mysql_native_password'            response.username = self.conn_setting['user']            response.schema = self.conn_setting['db']            response.authResponse = scramble_password            response.removeCapabilityFlag(Flags.CLIENT_COMPRESS)            response.removeCapabilityFlag(Flags.CLIENT_SSL)            response.removeCapabilityFlag(Flags.CLIENT_LOCAL_FILES)            send_client_socket(s, response.toPacket())            packet = read_server_packet(s)            packetType = getType(packet)            if packetType != Flags.OK:                error = ERR.loadFromPacket(packet)                raise OperationalError(error.errorMessage)            if self.conn_setting['db']:                sql = Initdb()                sql.sequenceId = 0                sql.schema = self.conn_setting['db']                packet = sql.toPacket()                s.sendall(packet)                while True:                    packet = read_server_packet(s)                    packetType = getType(packet)                    if packetType == Flags.EOF or packetType == Flags.ERR or packetType == Flags.OK:                        break            self.serverSocket = s        return self.serverSocket    def disconnect(self):        if self.serverSocket:            self.serverSocket.close()    def read_server_packet(self):        """        Reads a packet from a socket        """        # Read the size of the packet        psize = bytearray(3)        self.serverSocket.recv_into(psize, 3)        size = getSize(psize) + 1        # Read the rest of the packet        packet_payload = bytearray(size)        self.serverSocket.recv_into(packet_payload, size)        # Combine the chunks        psize.extend(packet_payload)        # if __debug__:        #     dump(psize)        return psize    def read_query_result(self):        # return        buff_list = []        while True:            packet = self.read_server_packet()            buff_list.append(packet)            sequenceId = getSequenceId(packet)            print("received query [%s]:" % (sequenceId,))            dump_my_packet(packet)            packetType = getType(packet)            if packetType == Flags.EOF or packetType == Flags.ERR or packetType == Flags.OK:                break        return buff_list        buff = self.read_server_packet()        # sequenceId = getSequenceId(buff)        # print("sequenceId", sequenceId)        buff_list.append(buff)        # context.sequenceId = getSequenceId(packet)        packet_type = getType(buff)        if packet_type != Flags.OK and packet_type != Flags.ERR:            # read_full_result_set(            #     self.serverSocket,            #     context.clientSocket,            #     context.buff,            #     context.bufferResultSet,            #     resultsetType=context.expectedResultSet            # )            self.read_full_result_set(                buff_list,                buff,                packedPacketSize=65535,                bufferResultSet=False,                resultsetType=Flags.RS_OK            )        # print("===== buff_list =====")        # for buff in buff_list:        #     dump(buff)        # print("===== buff_list =====")        return buff_list    def read_full_result_set(self, buff_list, buff, bufferResultSet=False,                             packedPacketSize=65535,                             resultsetType=Flags.RS_FULL):        """        Reads a full result set        """        from colcount import ColCount        from eof import EOF        colCount = ColCount.loadFromPacket(buff).colCount        # Read columns        for i in xrange(0, colCount):            packet = self.read_server_packet()            sequenceId = getSequenceId(packet)            print("sequenceId", sequenceId)            buff_list.append(packet)        # Check for OK or ERR        # Stop on ERR        packet = self.read_server_packet()        sequenceId = getSequenceId(packet)        print("sequenceId", sequenceId)        # buff_list.append(packet)        packetType = getType(packet)        # Error? Stop now        if packetType == Flags.ERR:            return        if packetType == Flags.EOF and resultsetType == Flags.RS_HALF:            return        # Read rows        while True:            packet = self.read_server_packet()            sequenceId = getSequenceId(packet)            print("sequenceId", sequenceId)            buff_list.append(packet)            packetType = getType(packet)            if packetType == Flags.EOF:                moreResults = EOF.loadFromPacket(packet).hasStatusFlag(                    Flags.SERVER_MORE_RESULTS_EXISTS)            if packetType == Flags.EOF or packetType == Flags.ERR:                break        # Show Create Table or similar?        if packetType == Flags.ERR:            return        # Multiple result sets?        if moreResults:            packet = self.read_server_packet()            sequenceId = getSequenceId(packet)            print("sequenceId", sequenceId)            buff_list.append(packet)            self.read_full_result_set(                buff_list,                self.read_server_packet(),                bufferResultSet=bufferResultSet,                packedPacketSize=packedPacketSize,                resultsetType=resultsetType)        return    def read_full_result_set_bak(self, buff_list, buff, bufferResultSet=True,                             packedPacketSize=65535,                             resultsetType=Flags.RS_FULL):        """        Reads a full result set        """        from colcount import ColCount        from eof import EOF        colCount = ColCount.loadFromPacket(buff).colCount        buff_list.append(buff)        # Read columns        for i in xrange(0, colCount):            buff = self.read_server_packet()            buff_list.append(buff)        # Check for OK or ERR        # Stop on ERR        buff = self.read_server_packet()        buff_list.append(buff)        packetType = getType(buff)        # Error? Stop now        if packetType == Flags.ERR:            return        if packetType == Flags.EOF and resultsetType == Flags.RS_HALF:            return        # Read rows        while True:            buff = self.read_server_packet()            buff_list.append(buff)            packetType = getType(buff)            if packetType == Flags.EOF:                moreResults = EOF.loadFromPacket(buff).hasStatusFlag(                    Flags.SERVER_MORE_RESULTS_EXISTS)            if 0 < packedPacketSize < len(buff):                buff_list.append(buff)            if packetType == Flags.EOF or packetType == Flags.ERR:                break        # Show Create Table or similar?        if packetType == Flags.ERR:            return        # Multiple result sets?        if moreResults:            self.read_full_result_set(                buff_list,                self.read_server_packet(),                bufferResultSet=bufferResultSet,                packedPacketSize=packedPacketSize,                resultsetType=resultsetType)        returnif __name__ == "__main__":    import doctest    doctest.testmod()